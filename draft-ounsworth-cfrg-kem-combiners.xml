<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.17 (Ruby 3.0.2) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

<!ENTITY RFC2119 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC5990 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.5990.xml">
<!ENTITY RFC7748 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.7748.xml">
<!ENTITY RFC3447 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.3447.xml">
<!ENTITY RFC8174 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC8411 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8411.xml">
<!ENTITY RFC8784 SYSTEM "https://bib.ietf.org/public/rfc/bibxml/reference.RFC.8784.xml">
<!ENTITY I-D.driscoll-pqt-hybrid-terminology SYSTEM "https://bib.ietf.org/public/rfc/bibxml3/reference.I-D.driscoll-pqt-hybrid-terminology.xml">
<!ENTITY I-D.ietf-tls-hybrid-design SYSTEM "https://bib.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-tls-hybrid-design.xml">
<!ENTITY I-D.ietf-ipsecme-ikev2-multiple-ke SYSTEM "https://bib.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-ipsecme-ikev2-multiple-ke.xml">
<!ENTITY I-D.ounsworth-pq-composite-kem SYSTEM "https://bib.ietf.org/public/rfc/bibxml3/reference.I-D.ounsworth-pq-composite-kem.xml">
<!ENTITY I-D.cfrg-schwabe-kyber SYSTEM "https://bib.ietf.org/public/rfc/bibxml3/reference.I-D.cfrg-schwabe-kyber.xml">
]>


<rfc ipr="trust200902" docName="draft-ounsworth-cfrg-kem-combiners-00" category="info" submissionType="IRTF" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="KEM Combiner">Combiner function for hybrid key encapsulation mechanisms (KEMs)</title>

    <author initials="M." surname="Ounsworth" fullname="Mike Ounsworth">
      <organization abbrev="Entrust">Entrust Limited</organization>
      <address>
        <postal>
          <street>2500 Solandt Road – Suite 100</street>
          <city>Ottawa, Ontario</city>
          <code>K2K 3G5</code>
          <country>Canada</country>
        </postal>
        <email>mike.ounsworth@entrust.com</email>
      </address>
    </author>

    <date year="2022" month="November" day="18"/>

    <area>Security</area>
    <workgroup>CFRG</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>The migration to post-quantum cryptography often calls for performing multiple key encapsulations in parallel and then combining their outputs to derive a single shared secret.</t>

<t>This document defines the KEM combiner <spanx style="verb">KDF( H(ss1) || H(ss2) )</spanx> which is considered to be a dual PRF in practice, even though not provably secure. This mechanism simplifies to <spanx style="verb">KDF( ss1 || ss2 )</spanx> when used with a KEM which internally uses a KDF to produce its shared secret. RSA-KEM, ECDH, Edwards curve DH, and CRYSTALS-Kyber are shown to meet this criteria and therefore be safe to use with the simplified KEM combiner.</t>

<!-- End of Abstract -->



    </abstract>



  </front>

  <middle>


<section anchor="sec-terminology"><name>Terminology</name>
<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14 <xref target="RFC2119"/>  <xref target="RFC8174"/> when, and only when, they appear in all capitals, as shown here.</t>

<t>This document is consistent with all terminology defined in <xref target="I-D.driscoll-pqt-hybrid-terminology"/>.</t>

</section>
<section anchor="sec-intro"><name>Introduction</name>

<t>A post-quantum / traditional hybrid key encapsulation mechanism (hybrid KEM) as defined in <xref target="I-D.driscoll-pqt-hybrid-terminology"/> as</t>

<dl>
  <dt>PQ/T Hybrid Key Encapsulation Mechanism:</dt>
  <dd>
    <t>A Key Encapsulation Mechanism (KEM) made up of two or more component KEM algorithms where at least one is a post-quantum algorithm and at least one is a traditional algorithm.</t>
  </dd>
</dl>

<t>Building a PQ/T hybrid KEM requires a secure function which combines the output of both component KEMs to form a single output. Several IETF protocols are adding PQ/T hybrid KEM mechanisms as part of their overall post-quantum migration strategies, examples include TLS 1.3 <xref target="I-D.ietf-tls-hybrid-design"></xref>, IKEv2 <xref target="I-D.ietf-ipsecme-ikev2-multiple-ke"></xref>, X.509; PKIX; CMS <xref target="I-D.ounsworth-pq-composite-kem"></xref>, OpenPGP (CITE once Aron's draft is up), JOSE / COSE (CITE once Orie's drafts are up).</t>

<t>This document normalizes a mechanisms for combining the output of two KEMs</t>

<section anchor="sec-kem-defn"><name>Key Encapsulation Mechanisms</name>

<t>For the purposes of this document, we consider a Key Encapsulation Mechanism (KEM) to be any asymmetric cryptographic scheme comprised of algorithms satisfying the following interfaces <xref target="PQCAPI"></xref>.</t>

<figure><artwork><![CDATA[
def kemKeyGen() -> (pk, sk)
def kemEncaps(pk) -> (ct, ss)
def kemDecaps(ct, sk) -> ss
]]></artwork></figure>

<t>where <spanx style="verb">pk</spanx> is public key, <spanx style="verb">sk</spanx> is secret key, <spanx style="verb">ct</spanx> is ciphertext, and <spanx style="verb">ss</spanx> is shared secret.</t>

<t>KEMs are typically used in cases where two parties, hereby refereed to as the "encapsulater" and the "decapsulater", wish to establish a shared secret via public key cryptography, where the decapsulater has an asymmetric key pair and has previously shared the public key with the encapsulater.</t>

</section>
</section>
<section anchor="sec-kemcombiner"><name>KEM Combiner</name>

<t>A KEM combiner is a function that takes in two shared secrets and returns a combined shared secret, where all values are byte arrays.</t>

<figure><artwork><![CDATA[
ss = kemCombiner(ss1, ss2)
]]></artwork></figure>

<t>This document assumes that shared secrets are the output of a KEM, but without loss of generality they may also be a pre-shared key (PSK) or any other source of cryptographic key material that implementers wish to combine with the output of a KEM, which is a post-safe migration strategy being adopted by some protocols, see for example IKEv2 in <xref target="RFC8784"></xref>.</t>

<t>In general it is desirable to use a dual PRF, a dual-input PRF which is keyed off either input, as a KEM combiner (see <xref target="sec-dualprf"/> for a discussion of dual PRFs). We take the following construction as a dual PRF in practice, and therefore suitable for use in all IETF protocols that need to combine the output of two KEMs:</t>

<figure title="general KEM combiner construction"><artwork><![CDATA[
ss = kemCombiner(ss1, ss2) = KDF( H(ss1) || H(ss2) )
]]></artwork></figure>

<t>where <spanx style="verb">KDF</spanx> represents a suitable choice of cryptographic key derivation function, <spanx style="verb">H</spanx> represents a cryptographic hash function, <spanx style="verb">ss1</spanx> and <spanx style="verb">ss2</spanx> represent the outputs of the first and second KEMs, and <spanx style="verb">||</spanx> represents concatenation. <spanx style="verb">KDF</spanx> and <spanx style="verb">H</spanx> are assumed to behave as random oracles.</t>

<t>See <xref target="sec-kemprimitives"/> for security analysis on the safety of using this combiner with RSA-KEM <xref target="RFC5990"></xref>, elliptic curve Diffie-Hellman <xref target="SEC1"></xref>, Edwards curve Diffie-Hellman <xref target="RFC7748"></xref>, and CRYSTALS-Kyber <xref target="I-D.cfrg-schwabe-kyber"></xref>. All of these cryptographic algorithms are found to have a KDF or cryptographic hash as the last step before output of the shared secret, and therefore the KEM combiner construction may be simplified to the following when used with combinations of the analyzed cryptographic algorithms.</t>

<figure title="simplified KEM combiner construction when both KEMs are known to provide strong output" anchor="tab-simplifiedCombiner"><artwork><![CDATA[
ss = kemCombiner(ss1, ss2) = KDF( ss1 || ss2 )
]]></artwork></figure>

<t>This simplified combiner proposed as a KEM combiner, for example in <xref target="I-D.ietf-tls-hybrid-design"/>.</t>

<t>In the case that more than two shared secrets need to be combined, the above construction can be extended in the obvious way:</t>

<figure title="KEM combiner construction for combining more than two shared secrets"><artwork><![CDATA[
ss = kemCombiner(ss1, ss2, ss3, ... ) 
      = KDF( H(ss1) || H(ss2) || H(ss3) ... )
]]></artwork></figure>

<!-- End of Introduction section -->

</section>
<section anchor="sec-iana"><name>IANA Considerations</name>

<t>None.</t>

<!-- End of IANA Considerations section -->

</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>This work assumes that the KEM combiner defined in <xref target="sec-kemcombiner"/> is a dual PRF in practice, despite the lack of security proof. As the academic literature progresses towards provably secure dual PRFs, this document may need to be obsoleted in favour of a more robust primitive.</t>

<t>It is important to note that the analysis herein pertains to the specific cryptographic algorithms analyzed and do not necessarily generalize to other constructions, even if they are based on the same underlying primitive. Specifically it depends on whether the shared secret produced by the KEM is the output of a fixed and secure key derivation function which makes the length and value of the shared secret beyond the direct control of the initiator of the KEM.</t>

<!-- End of Security Considerations section -->

<!-- Start of Appendices -->

</section>


  </middle>

  <back>


    <references title='Normative References'>

&RFC2119;
&RFC5990;
&RFC7748;
<reference anchor="SEC1" target="&lt;https://www.secg.org/sec1-v2.pdf&gt;">
  <front>
    <title>Standards for Efficient Cryptography Group, SEC1: Elliptic Curve Cryptography</title>
    <author >
      <organization></organization>
    </author>
    <date year="2009" month="May"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

&RFC3447;
&RFC8174;
&RFC8411;
&RFC8784;
&I-D.driscoll-pqt-hybrid-terminology;
&I-D.ietf-tls-hybrid-design;
&I-D.ietf-ipsecme-ikev2-multiple-ke;
&I-D.ounsworth-pq-composite-kem;
&I-D.cfrg-schwabe-kyber;
<reference anchor="Aviram2022" target="https://eprint.iacr.org/2022/065">
  <front>
    <title>Practical (Post-Quantum) Key Combiners from One-Wayness and Applications to TLS.</title>
    <author initials="N." surname="Aviram" fullname="Nimrod Aviram">
      <organization></organization>
    </author>
    <author initials="B." surname="Dowling" fullname="Benjamin Dowling">
      <organization></organization>
    </author>
    <author initials="I." surname="Komargodski" fullname="Ilan Komargodski">
      <organization></organization>
    </author>
    <author initials="K. G." surname="Paterson" fullname="Kenneth G. Paterson">
      <organization></organization>
    </author>
    <author initials="E." surname="Ronen" fullname="Eyal Ronen">
      <organization></organization>
    </author>
    <author initials="E." surname="Yogev" fullname="Eylon Yogev">
      <organization></organization>
    </author>
    <date year="2022"/>
  </front>
</reference>
<reference anchor="PQCAPI" target="https://csrc.nist.gov/CSRC/media/Projects/Post-Quantum-Cryptography/documents/example-files/api-notes.pdf">
  <front>
    <title>PQC - API notes</title>
    <author initials="N. P.-Q. C." surname="Project" fullname="NIST Post-Quantum Cryptography Project">
      <organization></organization>
    </author>
    <date year="2022" month="November"/>
  </front>
</reference>
<reference anchor="Bellare2015" target="https://eprint.iacr.org/2015/1198">
  <front>
    <title>Symmetric and Dual PRFs from Standard Assumptions: A Generic Validation of an HMAC Assumption.</title>
    <author initials="M." surname="Bellare" fullname="Mihir Bellare">
      <organization></organization>
    </author>
    <author initials="A." surname="Lysyanskaya" fullname="Anna Lysyanskaya">
      <organization></organization>
    </author>
    <date year="2015"/>
  </front>
</reference>


    </references>


<section anchor="sec-secanalysis"><name>Security Analysis</name>

<section anchor="sec-dualprf"><name>Dual PRF</name>

<t>Dual PRFs are a active area of research. A dual PRF is a function which is a PRF when keyed by either of its two inputs – guaranteeing pseudo-randomness if one of the keys is compromised or even maliciously chosen by an adversary <xref target="Aviram2022"></xref>. As of publication of this document, no dual PRFs have been standardized for use. In practice we often use HMACs or HKDFs to serve the role of a dual PRF even though they have never been proved to be dual PRFs <xref target="Bellare2015"></xref>, <xref target="Aviram2022"></xref>.</t>

<t>In essence, this document assumes that <spanx style="verb">KDF( H(input1) || H(input2))</spanx> is a dual PRF in practice, for suitable choices of key derivation function <spanx style="verb">KDF</spanx> and hash function <spanx style="verb">H</spanx>, despite not having formal security proofs. It has been proposed as a KEM combiner, for example in <xref target="I-D.ietf-tls-hybrid-design"/>. As the academic literature evolves, it may become appropriate to obsolete this document with a KEM combiner based on a provably secure dual PRF.</t>

</section>
<section anchor="sec-kemprimitives"><name>KEM primitives</name>

<t>In modern cryptographic design, KEM algorithms seek to have indistinguishability under adaptive chosen ciphertext attack (IND-CCA2). For hybrid KEMs we desire the additional property that the combiner, without loss of generality, leaks no information about ss2 even if ss1 is controlled by an attacker.</t>

<t>There are two ways to achieve such a hybrid KEM combiner; either by designing a combiner that is robust to one of the inputs being maliciously-chosen, called a dual PRF. See <xref target="sec-dualprf"/> for a discussion about the current state of dual PRF research. Or alternatively by only allowing the hybridization of KEMs where a malicious kemEncaps() algorithm cannot control the shared secret derived by the victim's kemDecaps() algorithm and then combining the shared secrets in a trivial way.</t>

<t>The following sections analyze commonly-used KEM algorithms to show that they have the following two properties, and are therefore suitable for use with the simplified KEM combiner presented in <xref target="sec-kemcombiner"/>, <xref target="tab-simplifiedCombiner"/>.</t>

<t><list style="numbers">
  <t>A malicious encapsulater cannot control the length of the KEM output (shared secret) that will be derived by the decapsulater.</t>
  <t>A malicious encapsulater cannot control the value of the KEM output (shared secret) that will be derived by the decapsulater. We define a KEM output to be "controlled by an attacker" if a maliciously-written kemEncaps() function can cause the victim's kemDecaps() algorithm to produce a shared secret either of a length chosen by the attacker, or to take on a given value with higher probability than can be obtained via rejection sampling on the shared secret output of kemEncaps().</t>
</list></t>

</section>
<section anchor="rsa-kem"><name>RSA-KEM</name>

<t>RSA encryption <xref target="RFC3447"></xref> can be promoted into a KEM as per <xref target="RFC5990"></xref> which defines a key transport based on RSA-KEM.</t>

<figure><artwork><![CDATA[
1. Generate a random integer z between 0 and n-1 (see note), and
  convert z to a byte string Z of length nLen, most significant byte
  first:

      z = RandomInteger (0, n-1)

      Z = IntegerToString (z, nLen)

2. Encrypt the random integer z using the recipient's public key
  (n,e), and convert the resulting integer c to a ciphertext C, a
  byte string of length nLen:

      c = z^e mod n

      C = IntegerToString (c, nLen)

3. Derive a key-encrypting key KEK of length kekLen bytes from the
  byte string Z using the underlying key derivation function:

      KEK = KDF (Z, kekLen)

4. Wrap the keying data K with the key-encrypting key KEK using the
  underlying key-wrapping scheme to obtain wrapped keying data WK:

      WK = Wrap (KEK, K)

5. Concatenate the ciphertext C and the wrapped keying data WK to
  obtain the encrypted keying data EK:

      EK = C || WK

6. Output the encrypted keying data EK.
]]></artwork></figure>

<t>where Steps 1 - 3 define "RSA-KEM", which is considered here. Steps 4 - 6 define "Key Transport based on RSA-KEM" and is out of scope for this analysis as we assume that any RSA-KEM construction intended for use in a hybrid KEM would use the <spanx style="verb">KEK</spanx> output from Step 3 as the final shared secret.</t>

<t>Here the transported symmetric key, <spanx style="verb">KEK</spanx>, is the KEM output (shared secret) <spanx style="verb">ss</spanx> as defined in <xref target="sec-kem-defn"/>. The encapsulater must choose a key derivation function <spanx style="verb">KDF</spanx> and declare it in the RSA-KEM parameters. The decapsulater may refuse to perform the the decapsulation if it does not like the encapsulater's choice of <spanx style="verb">KDF</spanx>, therefore it can be modeled as a random oracle producing an output of fixed length. The attacker is free to choose <spanx style="verb">z</spanx>, but assuming a strong choice of <spanx style="verb">KDF</spanx>, they cannot control either the length or the value <spanx style="verb">KEK</spanx> beyond what can be obtained by rejection sampling, thus satisfying properties 1 and 2 and defined in {.sec-kemprimitives}}.</t>

<t>Therefore RSA-KEM is considered to be suitable for use with the simplified KEM combiner defined in <xref target="sec-kemcombiner"/>, <xref target="tab-simplifiedCombiner"/>.</t>

<t>Security note: This analysis applies to the specific RSA-KEM construction defined above. This result is not intended to generalize to all RSA-based key transport mechanisms, as they may not have the same cryptographic properties.</t>

</section>
<section anchor="elliptic-curve-diffie-hellman-ecdh"><name>Elliptic Curve Diffie-Hellman (ECDH)</name>

<t>The elliptic curve Diffie-Hellman key exchange <xref target="SEC1"></xref> can be promoted into a KEM in a straightforward way by assuming an ephemeral-static (ES) mode where <spanx style="verb">def kemEncaps(pk) -&gt; (ct, ss)</spanx> includes generation of an ephemeral key pair, the public key being included as part of the ciphertext <spanx style="verb">ct</spanx> and the private key being discarded upon completion of the encapsulation.</t>

<t>According to <xref target="SEC1"></xref> section 6.1.3:</t>

<figure><artwork><![CDATA[
1. Use one of the Diffie-Hellman primitives specified in Section 3.3 to
   derive a shared secret field element z ∈ Fq from U's secret key d_U 
   established during the key deployment procedure and V's public key 
   Q_V obtained during the key deployment procedure. If the Diffie-
   Hellman primitive outputs “invalid”, output “invalid” and stop. 
   Decide whether to use the “standard” elliptic curve Diffie-Hellman 
   primitive or the elliptic curve cofactor Diffie-Hellman primitive
   according to the convention established during the setup procedure.

2. Convert z ∈ Fq to an octet string Z using the conversion routine 
   specified in Section 2.3.5.

3. Use the key derivation function KDF established during the setup 
   procedure to generate keying data K of length keydatalen octets 
   from Z and [SharedInfo]. If the key derivation function outputs 
   “invalid”, output “invalid” and stop.

4. Output K.
]]></artwork></figure>

<t>Other key exchange methods defined in <xref target="SEC1"></xref> follow a similar construction.</t>

<t>The attacker is free to choose a private key <spanx style="verb">d_U</spanx> which yields a shared secret <spanx style="verb">Z</spanx>, but cannot force <spanx style="verb">Z</spanx> to take on a chosen value without solving the elliptic curve discrete logarithm problem or performing rejection sampling. Assuming a strong choice of <spanx style="verb">KDF</spanx>, the attacker cannot control either the length or the value of <spanx style="verb">KEK</spanx> beyond what can be obtained by rejection sampling, thus satisfying properties 1 and 2 and defined in <xref target="sec-kemprimitives"/>.</t>

<t>Therefore elliptic curve Diffie-Hellman is considered to be suitable for use with the simplified KEM combiner defined in <xref target="sec-kemcombiner"/>, <xref target="tab-simplifiedCombiner"/>.</t>

</section>
<section anchor="edwards-curve-diffie-hellman-x25519-x448"><name>Edwards Curve Diffie-Hellman (X25519 / X448)</name>

<t>The elliptic curve Diffie-Hellman key exchange <xref target="SEC1"></xref> can be promoted into a KEM in a straightforward way by assuming an ephemeral-static (ES) mode where <spanx style="verb">def kemEncaps(pk) -&gt; (ct, ss)</spanx> includes generation of an ephemeral key pair, the public key being included as part of the ciphertext <spanx style="verb">ct</spanx> and the private key being discarded upon completion of the encapsulation.</t>

<t>According to <xref target="RFC7748"></xref> section 6.1, the X25519 key exchange is defined as:</t>

<figure><artwork><![CDATA[
Alice generates 32 random bytes in a[0] to a[31] and transmits K_A =
X25519(a, 9) to Bob, where 9 is the u-coordinate of the base point
and is encoded as a byte with value 9, followed by 31 zero bytes.

Bob similarly generates 32 random bytes in b[0] to b[31], computes
K_B = X25519(b, 9), and transmits it to Alice.

Using their generated values and the received input, Alice computes
X25519(a, K_B) and Bob computes X25519(b, K_A).

Both now share K = X25519(a, X25519(b, 9)) = X25519(b, X25519(a, 9))
as a shared secret.  Both MAY check, without leaking extra
information about the value of K, whether K is the all-zero value and
abort if so (see below).  Alice and Bob can then use a key-derivation
function that includes K, K_A, and K_B to derive a symmetric key.
]]></artwork></figure>

<t>The X448 key exchange follows a similar construction.</t>

<t>The attacker is free to choose a private key <spanx style="verb">b</spanx> which yields a shared secret <spanx style="verb">K</spanx>, but cannot force <spanx style="verb">K</spanx> to take on a chosen value without solving the elliptic curve discrete logarithm problem or performing rejection sampling. Assuming a strong choice of <spanx style="verb">KDF</spanx>, the attacker cannot control either the length or the value of the derived symmetric key beyond what can be obtained by rejection sampling, thus satisfying properties 1 and 2 and defined in <xref target="sec-kemprimitives"/>.</t>

<t>Therefore Edwards curve Diffie-Hellman, X25519 and X448, are considered to be suitable for use with the simplified KEM combiner defined in <xref target="sec-kemcombiner"/>, <xref target="tab-simplifiedCombiner"/>.</t>

</section>
<section anchor="crystals-kyber"><name>CRYSTALS-Kyber</name>

<t>The CRYSTALS-Kyber kemEncaps() is defined as follows <xref target="I-D.cfrg-schwabe-kyber"></xref>:</t>

<figure><artwork><![CDATA[
1.Compute
  1. m = H(seed)
  2. (Kbar, cpaSeed) = G(m || H(pk))
  3. cpaCipherText = InnerEnc(m, publicKey, cpaSeed)
2.Return
  1. cipherText = cpaCipherText
  2. sharedSecret = KDF(KBar || H(cpaCipherText))
]]></artwork></figure>

<t>with definitions as per <xref target="I-D.cfrg-schwabe-kyber"></xref>.</t>

<t>Here the hash functions <spanx style="verb">G</spanx>, <spanx style="verb">H</spanx> and the key derivation function <spanx style="verb">KDF</spanx> are in theory chosen by the encapsulater, but in practice are fixed by the Kyber specification to be <spanx style="verb">H: SHA3-256</spanx>, <spanx style="verb">G: SHA3-512</spanx>, and <spanx style="verb">KDF: SHAKE-256</spanx>, which can be modeled as random oracles. The attacker is free to choose <spanx style="verb">m</spanx>, but but not the decapsulater's public key <spanx style="verb">pk</spanx>, nor do they have control of <spanx style="verb">cpaCipherText</spanx> so long as <spanx style="verb">InnerEnc</spanx> remains IND-CPA secure. Therefore the attacker cannot control the value or length of <spanx style="verb">K</spanx> beyond what can be obtained by rejection sampling.</t>

<t>Therefore CRYSTALS-Kyber is considered to be suitable for use with the simplified KEM combiner defined in <xref target="sec-kemcombiner"/>, <xref target="tab-simplifiedCombiner"/>.</t>

</section>
</section>
<section anchor="intellectual-property-considerations"><name>Intellectual Property Considerations</name>

<t>None.</t>

</section>
<section anchor="contributors-and-acknowledgements"><name>Contributors and Acknowledgements</name>

<t>This document incorporates contributions and comments from a large group of experts. The Editors would especially like to acknowledge the expertise and tireless dedication of the following people, who attended many long meetings and generated millions of bytes of electronic mail and VOIP traffic over the past years in pursuit of this document:</t>

<t>Douglas Stebila, Nimrod Aviram.</t>

<t>We are grateful to all, including any contributors who may have
been inadvertently omitted from this list.</t>

<t>This document borrows text from similar documents, including those referenced below. Thanks go to the authors of those
   documents.  "Copying always makes things easier and less error prone" - <xref target="RFC8411"></xref>.</t>

<section anchor="making-contributions"><name>Making contributions</name>

<t>To be removed before publication.</t>

<t>Additional contributions to this draft are welcome. Please see the working copy of this draft at, as well as open issues at:</t>

<t>https://github.com/EntrustCorporation/draft-ounsworth-cfrg-kem-combiners</t>

<!-- End of Contributors section -->

</section>
</section>


  </back>

<!-- ##markdown-source:
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
3mxN/i+W6JXftkwAAA==

-->

</rfc>

